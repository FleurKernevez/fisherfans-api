openapi: 3.1.0
info:
  title: Fisher Fans API V2
  description: |
    API pour la gestion des utilisateurs, bateaux, sorties en mer et réservations.
  termsOfService: https://www.fisherFans.org/api-terms-of-use
  contact:
    name: Fisher Fans API
    url: https://www.fisherFans.org/about/staying-in-touch
    email: contact@fisherFansapi.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.0"
servers:
  - url: https://api.fisherFans.org/v2
    description: Production server
  - url: https://api.fisherFans.staging.org/v2
    description: Staging server
  - url: https://api.fisherFans.development.org/v2
    description: Development server

security:
  - bearerAuth: []  # Authentification via token JWT

paths:
  /user:
    post:
      tags:
        - User
      summary: Créer un utilisateur
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Utilisateur créé avec succès.
        "400":
          description: Données invalides ou manquantes.
        "422":
          description: Impossible de créer l'utilisateur.
  
  /user/login:
    post:
      tags:
        - User
      summary: Connexion utilisateur
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Connexion réussie avec token.
        "401":
          description: Identifiants invalides.
  
  /user/infos:
    get:
      tags:
        - User
      summary: Récupérer les infos utilisateur connecté
      operationId: getUserInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Infos utilisateur récupérées.
        "401":
          description: Non autorisé.

  /boats:
    post:
      tags:
        - Boat
      summary: Créer un bateau
      operationId: createBoat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Boat"
      responses:
        "201":
          description: Bateau créé avec succès.
        "400":
          description: Données invalides.
        "403":
          description: Permission refusée.

  /boatTrip:
    post:
      tags:
        - BoatTrip
      summary: Créer une sortie en mer
      operationId: createBoatTrip
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoatTrip"
      responses:
        "201":
          description: Sortie en mer créée.
        "400":
          description: Données invalides.
        "422":
          description: Impossible de créer la sortie.
  
  /reservation:
    post:
      tags:
        - Reservation
      summary: Créer une réservation
      operationId: createReservation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        "201":
          description: Réservation créée avec succès.
        "400":
          description: Données invalides.
        "404":
          description: Sortie en mer non trouvée.
        "422":
          description: Capacité du bateau dépassée.
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        lastname:
          type: string
          maxLength: 50
        firstname:
          type: string
          maxLength: 50
        birthdate:
          type: string
          format: date
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        phoneNumber:
          type: string
        address:
          type: string
        city:
          type: string
        status:
          type: string
          enum: ["particulier", "professionnel"]
      required:
        - lastname
        - firstname
        - email
        - password

    Boat:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 100
        brand:
          type: string
        productionYear:
          type: integer
        type:
          type: string
        capacityMax:
          type: integer
        enginePower:
          type: integer
        user_id:
          type: integer
      required:
        - name
        - brand
        - productionYear
        - type
        - user_id

    BoatTrip:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        passengersNumber:
          type: integer
        price:
          type: number
          format: float
        user_id:
          type: integer
        boat_id:
          type: integer
      required:
        - title
        - startDate
        - endDate
        - passengersNumber
        - price
        - user_id
        - boat_id

    Reservation:
      type: object
      properties:
        id:
          type: integer
        boatTrip_id:
          type: integer
        choosenDate:
          type: string
          format: date
        seatsBooked:
          type: integer
        totalPrice:
          type: number
          format: float
        user_id:
          type: integer
      required:
        - boatTrip_id
        - choosenDate
        - seatsBooked
        - totalPrice
        - user_id
