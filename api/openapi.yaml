openapi: 3.0.3
info:
  title: Fisher Fans API V2
  description: |
    API pour la gestion des utilisateurs, bateaux, sorties en mer et réservations.
  termsOfService: https://www.fisherFans.org/api-terms-of-use
  contact:
    name: Fisher Fans API
    url: https://www.fisherFans.org/about/staying-in-touch
    email: contact@fisherFansapi.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.0"

servers:
  - url: https://api.fisherFans.org/v2
    description: Production server
  - url: https://api.fisherFans.staging.org/v2
    description: Staging server
  - url: https://api.fisherFans.development.org/v2
    description: Development server

security:
  - bearerAuth: []  # Authentification via token JWT

paths:
  # Utilisateurs
  /user:
    post:
      tags:
        - User
      summary: Créer un utilisateur
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Utilisateur créé avec succès.
        "400":
          description: Données invalides ou manquantes.
        "422":
          description: Impossible de créer l'utilisateur.

  /user/login:
    post:
      tags:
        - User
      summary: Connexion utilisateur
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Connexion réussie avec token.
        "401":
          description: Identifiants invalides.

  /user/infos:
    get:
      tags:
        - User
      summary: Récupérer les infos utilisateur connecté
      operationId: getUserInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Infos utilisateur récupérées.
        "401":
          description: Non autorisé.

  # Bateaux
  /boats:
    post:
      tags:
        - Boat
      summary: Créer un bateau
      operationId: createBoat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Boat"
      responses:
        "201":
          description: Bateau créé avec succès.
        "400":
          description: Données invalides.
        "403":
          description: Permission refusée

    get:
      tags:
        - Boat
      summary: Récupérer les bateaux de l'utilisateur connecté
      operationId: getUserBoats
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des bateaux récupérée avec succès.
        "404":
          description: Aucun bateau trouvé.

  /boats/{boatId}:
    put:
      tags:
        - Boat
      summary: Mettre à jour un bateau
      operationId: updateBoat
      security:
        - bearerAuth: []
      parameters:
        - name: boatId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Boat"
      responses:
        "200":
          description: Bateau mis à jour avec succès.
        "403":
          description: L'utilisateur n'est pas propriétaire du bateau.
        "404":
          description: Bateau non trouvé.

  # Recherche de bateaux dans une bounding box
  /boats/search:
    get:
      tags:
        - Boat
      summary: Rechercher des bateaux dans une zone géographique donnée
      operationId: searchBoatsBoundingBox
      parameters:
        - name: minLatitude
          in: query
          required: true
          schema:
            type: number
        - name: maxLatitude
          in: query
          required: true
          schema:
            type: number
        - name: minLongitude
          in: query
          required: true
          schema:
            type: number
        - name: maxLongitude
          in: query
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Liste des bateaux trouvés dans la zone.
        "404":
          description: Aucun bateau trouvé.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      description: "Modèle représentant un utilisateur."
      properties:
        id:
          type: integer
          description: "Identifiant unique de l'utilisateur."
        lastname:
          type: string
          maxLength: 50
        firstname:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - lastname
        - firstname
        - email
        - password

    Boat:
      type: object
      description: "Modèle représentant un bateau."
      properties:
        id:
          type: integer
          description: "Identifiant unique du bateau."
        name:
          type: string
          maxLength: 100
        brand:
          type: string
        productionYear:
          type: integer
      required:
        - name
        - brand
        - productionYear
